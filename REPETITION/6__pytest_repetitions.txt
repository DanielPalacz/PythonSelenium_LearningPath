
1. How basic python pytest test may look?

###### def test_basic():
######     assert something



2. Naming Convention.

-- what are rules for naming of python files which will be running?
###### filename should have 'test' keyword in any place

-- what are rules for naming of python methods which will be running?
###### test method name has to start by 'test' keyword




3. @pytest.fixture() decorator

-- 3.0. What are fixtures (in Testing World)? And What are fixtures in terms of pytest?
###### A test fixture (also known as a test context) is the set of preconditions or state needed to run a test.
###### method decorated by: @pytest.fixture() --> @pytest.fixture() == @pytest.fixture(scope="function")

-- 3.1. how to write pytest fixture using @pytest.fixture() decorator?
###### to your fixture method - take/&/glue @pytest.fixture() decorator as usual python decorator
###### define what you want under your fixture method


-- 3.2. how to write the code inside (your own pytest fixture) which will be run before/after decorated function?
###### everything defined before 'yield' keyword will be running before your test method
###### everything defined after  'yield' keyword will be running after your test method


-- 3.3. Fixture-Scope: @pytest.fixture(scope="xyz")
###### function: the default scope, the fixture is destroyed at the end of the test.
###### class: the fixture is destroyed during teardown of the last test in the class.
###### module: the fixture is destroyed during teardown of the last test in the module.
###### package: the fixture is destroyed during teardown of the last test in the package.
###### session: the fixture is destroyed at the end of the test session.
######
###### by default @pytest.fixture() function scope -> mean that the given fixture will be executed 'from scratch' with Every TestMethod


-- 3.4. how to pass newly created fixture to test method?
###### a)
###### as test method argument
###### lets have your own pytest fixture method named 'my_own_pytest_fixture_method' then in test method definition: def test_method_definition('my_own_pytest_fixture_method')
###### b)
###### by glueing the fixture to class abstraction: @pytest.mark.usefixtures("fixturename")
###### c)
###### module, package, session level scope fixtures -- how it is?


-- 3.5. how to pass data-parameters from fixtures to test methods?
###### simply put 'return' statement in the fixture and pass this as usual
###### for example:
######
###### @pytest.fixture()
###### def fixture_passing_something_to_testmethod():
######     return ["runner", "email"]
######
###### and later:
###### testmethod_xyz(fixture_passing_something_to_testmethod)
######     x = fixture_passing_something_to_testmethod[1]
###### ...


-- 3.6. how to parametrize fixture? (different concept comparing with 3.5)
######
###### @pytest.fixture(params=[("Chrome", "x33"), ("Firefox", "y21")])
###### def parametrized_fixt(request):
######     fixture code...
######     return request.param
######
###### regarding the above fixture:
###### when it is passed to test method will executed 2-times, 1st: ("Chrome", "x33"), 2nd: ("Firefox", "y21")


-- 3.6. what is "request" object in the pytest world?
###### it is a special fixture providing information of the requesting test function (class FixtureRequest)
###### A request object gives access to the requesting test context
###### param - optional param attribute in case the fixture is parametrized indirectly.


4. pytest.mark.parametrize() decorator
-- how to use pytest.mark.parametrize() decorator for running test method with different parameter values?
###### the below go/glue to your test method
###### @pytest.mark.parametrize("name1,name21", [(name1_val1,arg_name2_val1),(name1_val2,arg_name2_val2)])
###### -- first names of arguments
###### -- later list with tuples of values for those arguments


 *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
 *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***


5. Python-Pytest TAGS == MARKS => @pytest.mark.(xyz)


-- 5.1. what if you would like to run some group of test cases as Smoke/Sanity/Regression?
###### pytest 'mark' concept gives solution here (Cucumber: tagging, TestNG: groups)
###### @pytest.mark(anyName) -> fe: -> @pytest.mark.smoke (it is custom pytest MARK)


-- 5.2 and later how to run only tests marked as 'smoke' from cmd?
###### py.test -m smoke -v -s
###### PytestUnknownMarkWarning: Unknown @pytest.mark.smoke" - is this a typo?
###### You can register custom marks to avoid this warning - for details, see http://doc.pytest.org/en/latest/mark.html


-- 5.3. MARKS examples:
###### @pytest.mark.skip, @pytest.mark.skipif
###### @pytest.mark.xfail   ---> it is unique annotations comparing to Java, TestNG etc (running, but not-reporting)


6. Modification in test running

-- 6.1. running tests in parallel
-- what package should be installed to run tests in parallel? how to start pytest runner for running 3 tests in parallel?
###### pip install pytest-xdist
###### pytest -n 3
###### pytest test_filename.py -n 3


-- 6.2. how to run test cases based on test method names (simulating modules)
##### py.test -k CreditCard


-- 6.3. Changing standard (Python) test discovery
##### https://docs.pytest.org/en/stable/example/pythoncollection.html




7)
Pytest with python logging module
###### pytest.ini example
###### in the Page Object classes add logger field (self.logger = logging.getLogger(__name__))



8)
Add Allure reporting to Pytest/Selenium suite.



9)
What is doing @pytest.mark.usefixtures("fixture_name")?
###### (in pytest) it is way of passing fixtures to test methods groupped under TestClass
###### what will happen if we have more than 1 test method under TestClass?



10)
pytest / conftest
###### there was issue with passing fixture driver object (from conftest) to test method
###### it was about visibility of driver object in in the test method
-- then how from conftest level set value of driver field in the test method?
###### to fixture method setup() (from conftest) we can pass 'request' parameter
###### and inside body of fixture method we can add: request.cls.driver = driver (this will pass to the TestClass argument driver object)




11. pytest cmd parameters
###### -k regExrStringPhrase, -s log output, -v version, -m markname


12. Generating html reports
###### pip install pytest-html
###### pytest --html=report.html




https://stackoverflow.com/questions/34466027/in-pytest-what-is-the-use-of-conftest-py-files
(much more use case than supporting pytest fixtures groupping)
-----
Fixtures are a potential and common use of conftest.py. The fixtures that you will define will be shared among all tests in your test suite. 
However, defining fixtures in the root conftest.py might be useless and it would slow down testing if such fixtures are not used by all tests.
-----


Does it have other uses?

1. Fixtures: 
Define fixtures for static data used by tests. This data can be accessed by all tests in the suite unless specified otherwise. 
This could be data as well as helpers of modules which will be passed to all tests.

2. External plugin loading:
conftest.py is used to import external plugins or modules.

3. Hooks
You can specify hooks such as setup and teardown methods and much more to improve your tests.
pytest calls hook functions to implement initialization, running, test execution and reporting.

4. Test root path: 
This is a bit of a hidden feature. By defining conftest.py in your root path, you will have pytest recognizing your application modules without specifying PYTHONPATH. 
In the background, py.test modifies your sys.path by including all submodules which are found from the root path.





What is hook?
--
hooking covers a range of techniques used to alter or augment the behaviour of an operating system, of applications, or of other software components by intercepting function calls or messages or events passed between software components. Code that handles such intercepted function calls, events or messages is called a hook.
--
In a generic sense, a "hook" is something that will let you, a programmer, view and/or interact with and/or change something that's already going on in a system/program.
--
Simple said:
A hook is a means of executing custom code (function) either before, after, or instead of existing code. For example, a function may be written to "hook" into the login process in order to execute a Captcha function before continuing on to the normal login process.
--
Hooks are a category of function that allows base code to call extension code. This can be useful in situations in which a core developer wants to offer extensibility without exposing their code.
--












######################################################################################################################
Pytest - Rahul Shetty

Overall summary:
- any code should should be wrapped in method, only then PYTEST will execute the given 'abstraction/sample' as test
- method name should have sense, then you usr reg expression-filtering (treating group of tests as modules, fe: CreditCardFeature, AtmIntegrationLate, Payments)
- 'k' regExrStringPhrase, -s log output, -v version, -m markname

- tags in python-pytest terminology == MARKS
- you can mark (tag) tests, like: @pytest.mark.smoke and then run with -m smoke

- skip tests: @pytest.mark.skip
- if you want to run test - but skipping reporting? @pytest.mark.xfail

- fixtures are used as setup and tear down methods for test cases -> @pytest.fixture()
- conftest file is used to generalize fixture to make it available to all test cases
- fixture scope function/class -> @pytest.fixture(scope="class")




***** SECTION 18.75

pytest --version
pytest 6.1.2
**************************************************************


***** SECTION 18.76 - Running Pytest from terminal

Pytests Framework executes only methods.

pycharm test runner:
-- edit configutation -> Python test -> Pytest test -> (+ optionally) -> set file
--- 'v' verbose
py.test -v
--- 's' console logs (like prints, logging module logs also?)
py.test -v -s

**************************************************************


***** SECTION 18.78 - How to run selected pytests test set

py.test filename.py -v -s
test names regular expressions 'k' --> (method names == test names in pytest)
py.test -k CreditCard -v -s





**************************************************************
***** SECTION 18.79 - Grouping tests with pytest mark to run selected group


**************************************************************
***** SECTION 18.80 - What Fixtures?


**************************************************************
***** SECTION 18.81 - Importance of Conftest file


**************************************************************
***** SECTION 18.82 - Introduction to Data Driven Fixtures


**************************************************************
***** SECTION 18.83 - Parameterizing tests with mulitiple data sets using Fixtures


**************************************************************
***** SECTION 18.84 - Generating HTML reports for Pytests testcases

pip install pytest-html
pytest --html=report.html

