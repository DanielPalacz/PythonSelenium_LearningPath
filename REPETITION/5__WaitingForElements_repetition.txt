

1)
What functionality represents "Implicit Wait"
-----> wait x seconds if object is not displayed
-----> it applies globally
-----> if object is found faster than x seconds then execution will resume faster

driver.implicitly_wait(10)
driver.find_element_by_id("clickOnMe").click()
# this is linked to every element in the script
# if there are no elements then script will wait 10s defined in implicitly_wait



2)
# ExplicitWait object is based on WebDriverWait - it allows for defining specific condition for which we wait
# WebDriverWait(driver, timeout, freq, IgnoredException)
wait = WebDriverWait(driver, 10, 0.5, NoSuchElementException)

-----> explicit



3)
# to use previously defined ExplicitWait:
# here in method until we provide condition (importing expected_conditions module)
wait.until(expected_conditions.visibility_of_element_located((By.TAG_NAME, "p")))



4)
Defining specific condition for Wait if pre-definied conditions from 'expected_conditions' are not enough for us.

#
# Option 1 - 105)
# Below method until should take as parameter other method (which returns False if New condition is not Passed)
# -- in the example this method will be lambda
# -- web_driver = driver (web_driver is local variable in lambda namespace)
wait.until(lambda web_driver: len(web_driver.find_elements_by_tag_name("p")) == 1)
print(driver.find_element_by_tag_name("p").text)


# Option 2 - 106)
# New class with special '__call__' method:
# --- with driver as parameter
# --- and with condition inside body of __call__ method


class WaitForListSize:

    def __init__(self, element_name, expected_number_of_elements):
        self.located_element = element_name
        self.expected_size = expected_number_of_elements

    def __call__(self, driver):
        return len(driver.find_elements_by_xpath(self.located_element)) == self.expected_size


# Then to use our class / (__call__ method) -- we are passing object newly created class WaitForListSize
wait.until(WaitForListSize("//p", 1))
print("Printed: ", time.time())
print(driver.find_element_by_tag_name("p").text)
